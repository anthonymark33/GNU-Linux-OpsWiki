In ES6, you can redefine the semantics of some operations using proxies.

Proxies are special objects, created with two parameters:

    handler: for each operation, there is a corresponding handler method (a trap) that intercepts the operation on its way to the target and performs that operation.

    target: if the handler doesnâ€™t intercept the operation then the operation is performed on the target.

var target = {};
var handler = {
  get: function (receiver, name) {
    return `Hello, ${name}!`;
  }
};

var proxy = new Proxy(target, handler);
proxy.world === 'Hello, world!';

ES6 lets you create proxies that can be switched off (revoked):

let {proxy, revoke} =
    Proxy.revocable(target, handler);
// switch off by calling revoke()

Warning: proxies are an advanced ES6 feature, but are not yet implemented by many browsers or transpilers.

